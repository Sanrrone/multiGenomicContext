}
positive<-positive[order(positive$value),]
negative<-negative[order(negative$value),]
if(nrow(positive>1)){
if(nrow(negative)>1){
newcontig<-rbind(positive,negative)
}else{
newcontig<-positive
}
}else{
if(nrow(negative)>1){
newcontig<-negative
}
}
for(i in seq(1:nrow(newcontig))){
tmp<-data[i,]
data[i,]<-data[row<-which(data == as.character(newcontig["name"][i,])),]
data[row,]<-tmp
}
}
data["V5"]<-data["V4"]<-1
colnames(data)<- c("chr", "start", "end","V4","V5")
colnames(rnadata)<- c("Gene", "start", "end","Contig","color","V6","V7")
colnames(fdata)<-c("Gene","start","end","Contig","Cog","V6","V7")
colnames(rdata)<-c("Gene","start","end","Contig","Cog","V6","V7")
data
colnames(data)<- c("chr", "start", "end","V4","V5")
colnames(rnadata)<- c("Gene", "start", "end","Contig","color","V6","V7")
rnadata
colnames(rnadata)<- c("Gene", "start", "end","Contig","color")
colnames(fdata)<-c("Gene","start","end","Contig","Cog","V6","V7")
colnames(rdata)<-c("Gene","start","end","Contig","Cog")
colnames(fdata)<-c("Gene","start","end","Contig","Cog")
colnames(rdata)<-c("Gene","start","end","Contig","Cog")
colnames(gcdata)<-c("Contig","start","end","gccontent","gcskew")
#head(data)
tocirmeasure<-segAnglePo(measure, seg=c(as.matrix(measure["seg.name"][,])))
tocirmeasure[2,2]<-300;tocirmeasure[2,3]<-620
tocirmeasure[3,2]<-0;tocirmeasure[3,3]<-620
tocirmeasure[4,2]<-420;tocirmeasure[4,3]<-620
tocirmeasure[5,2]<-90;tocirmeasure[5,3]<-620
tocirmeasure[6,2]<-120;tocirmeasure[6,3]<-620
tocirmeasure[7,2]<-180;tocirmeasure[7,3]<-620
tocirmeasure[8,2]<-240;tocirmeasure[8,3]<-620
tocirmeasure2<-segAnglePo(measure2, seg=c(as.matrix(measure2["seg.name"][,])))
tocirmeasure2[1,2]<-330
tocirmeasure4<-segAnglePo(measure4, seg=c(as.matrix(measure4["seg.name"][,])))
tocirmeasure4[1,2]<-395
tocirmeasure8<-segAnglePo(measure8, seg=c(as.matrix(measure8["seg.name"][,])))
tocirmeasure8[1,2]<-146
tocirmeasure10<-segAnglePo(measure10, seg=c(as.matrix(measure10["seg.name"][,])))
tocirmeasure10[1,2]<-210
tocir <- segAnglePo(data, seg=c(as.matrix(data["chr"][,])))
tocirf<-segAnglePo(fdata, seg=c(as.matrix(fdata["Gene"][,])))
tocirr<-segAnglePo(rdata, seg=c(as.matrix(rdata["Gene"][,])))
tocirrna<-segAnglePo(rnadata, seg=c(as.matrix(rnadata["Gene"][,])))
#tocirgc<-segAnglePo(gcdata, seg=c(as.matrix(gcdata["Gene"][,])))
tocirgc<-segAnglePo(gcdata, seg=c(as.matrix(gcdata["Contig"][,])))
#head(tocirgc)
getl<-function (contig) {
row<-which(data == as.character(contig))
return(as.numeric(data["end"][row,]))
}
#get angle length of contig
getal<-function (contig) {
row<-which(tocir == as.character(contig))
return(as.numeric(tocir[row,3]) -  as.numeric(tocir[row,2]))
}
getsa<-function (contig) {
row<-which(tocir == as.character(contig))
return(as.numeric(tocir[row,2]))
}
#adjust angle genes for each contig, if you get an error, maybe some contig not exist in data
#forward genes
for(i in seq(1:nrow(tocirf))){
tocirf[i,2]<-getsa(c(as.matrix(fdata["Contig"][i,])))+(getal(fdata["Contig"][i,])/getl(c(as.matrix(fdata["Contig"][i,]))))*as.numeric(fdata["start"][i,])
tocirf[i,3]<-getsa(fdata["Contig"][i,])+(getal(fdata["Contig"][i,])/getl(c(as.matrix(fdata["Contig"][i,]))))*as.numeric(fdata["end"][i,])
tocirf[i,1]<-paste(c("bar_"),i,sep="")
}
fdata["Gene"]<-as.data.frame(tocirf[,1])
#reverse genes
for(i in seq(1:nrow(tocirr))){
tocirr[i,2]<-getsa(rdata["Contig"][i,])+(getal(rdata["Contig"][i,])/getl(c(as.matrix(rdata["Contig"][i,]))))*as.numeric(rdata["start"][i,])
tocirr[i,3]<-getsa(rdata["Contig"][i,])+(getal(rdata["Contig"][i,])/getl(c(as.matrix(rdata["Contig"][i,]))))*as.numeric(rdata["end"][i,])
tocirr[i,1]<-paste(c("bar_"),i,sep="")
}
rdata["Gene"]<-as.data.frame(tocirr[,1])
#rna genes (trna rrna)
for(i in seq(1:nrow(tocirrna))){
tocirrna[i,2]<-getsa(rnadata["Contig"][i,])+(getal(rnadata["Contig"][i,])/getl(c(as.matrix(rnadata["Contig"][i,]))))*as.numeric(rnadata["start"][i,])
tocirrna[i,3]<-getsa(rnadata["Contig"][i,])+(getal(rnadata["Contig"][i,])/getl(c(as.matrix(rnadata["Contig"][i,]))))*as.numeric(rnadata["end"][i,])
tocirrna[i,1]<-paste(c("bar_"),i,sep="")
}
rnadata["Gene"]<-as.data.frame(tocirrna[,1])
#gc
for(i in seq(1:nrow(tocirgc))){
tocirgc[i,2]<-getsa(gcdata["Contig"][i,])+(getal(gcdata["Contig"][i,])/getl(c(as.matrix(gcdata["Contig"][i,]))))*as.numeric(gcdata["start"][i,])
tocirgc[i,3]<-getsa(gcdata["Contig"][i,])+(getal(gcdata["Contig"][i,])/getl(c(as.matrix(gcdata["Contig"][i,]))))*as.numeric(gcdata["end"][i,])
tocirgc[i,6]<-gcdata["start"][i,]
tocirgc[i,7]<-gcdata["end"][i,]
tocirgc[i,1]<-paste(c("bar_"),i,sep="")
}
gcdata["Contig"]<-as.data.frame(tocirgc[,1])
getcolor<-function(type){
switch(as.character(type),
"A" = "darkcyan", "B" = "sienna", "C" = "orange", "D" = "yellow", "E" = "green",
"F" = "pink", "G" = "steelblue", "H" = "purple", "I" = "brown", "J" = "violet",
"K" = "maroon", "L" = "gold", "M" = "dark green", "N" = "dark red", "O" = "dark blue",
"P" = "cyan", "Q" = "dark orange", "R" = "turquoise", "S" = "gray", "T" = "chocolate",
"U" = "beige", "V" = "yellowgreen", "W" = "dimgray", "X" = "gray", "Y" = "orangered",
"Z" = "dark cyan")
}
for(i in seq(1:nrow(as.data.frame(fdata)))){
fdata["V6"][i,]<-getcolor(fdata["Cog"][i,])
}
for(i in seq(1:nrow(as.data.frame(rdata)))){
rdata["V6"][i,]<-getcolor(rdata["Cog"][i,])
}
fdata["V6"]<-rdata["V6"]<-1
for(i in seq(1:nrow(as.data.frame(fdata)))){
fdata["V6"][i,]<-getcolor(fdata["Cog"][i,])
}
for(i in seq(1:nrow(as.data.frame(rdata)))){
rdata["V6"][i,]<-getcolor(rdata["Cog"][i,])
}
mymedian<-median(gcdata$gccontent)
#mean(gcdata$gccontent)
#class(gcdata["gccontent"])
#head(gcdata)
range(gcdata["gccontent"])
range(gcdata["gcskew"])
library(ggplot2)
library(HMP)
library(micropower)
library(microbiome)
data("peerj32")
pseq <- peerj32$phyloseq
pseq.rel <- transform_phyloseq(pseq, "relative.abundance", "OTU")
head(prevalence(pseq.rel, detection.threshold = 1, sort = FALSE))
prevalent.taxa <- prevalent_taxa(pseq.rel, detection.threshold = 1, prevalence.threshold = 80)
#core microbiota 2d line plots
# With absolute read counts
det <- c(0, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 1e4)
res <- plot_core(pseq, prevalence.intervals = prev, detection.thresholds = det, plot.type = "lineplot")
res$plot + xlab("Abundance (OTU read count)")
res <- plot_core(pseq, prevalence.intervals = prev, detection.thresholds = det, plot.type = "lineplot")
prev
det <- c(0, 0.1, 0.2, 0.5, 1, 2, 5, 10, 20)
prev <- seq(10, 100, 10)
core <- core_matrix(pseq.rel, prevalence.intervals = prev, detection.thresholds = det)
pseq.rel <- transform_phyloseq(pseq, "relative.abundance", "OTU")
#List prevalence for each group at 1 percent relative abundance abundance threshold:
head(prevalence(pseq.rel, detection.threshold = 1, sort = FALSE))
prevalent.taxa <- prevalent_taxa(pseq.rel, detection.threshold = 1, prevalence.threshold = 80)
#core microbiota 2d line plots
# With absolute read counts
det <- c(0, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 1e4)
res <- plot_core(pseq, prevalence.intervals = prev, detection.thresholds = det, plot.type = "lineplot")
res$plot + xlab("Abundance (OTU read count)")
library(OmicCircos)
citation("OmicCircos")
library(phyloseq)
library(devtools)
install.packages("devtools")
source("https://bioconductor.org/biocLite.R")
biocLite("biomformat")
library(biomformat)
biocLite(c("GO.db"))
install_github("microbiome/microbiome") # Install the package
library(devtools)
install_github("microbiome/microbiome") # Install the package
install_github("ropensci/rdryad") # Install proposed package
install_github("antagomir/netresponse") # Install proposed package
install.packages(c("gridExtra", "earlywarnings"))
biocLite("phyloseq")
library(xlsx)
install.packages(c("xlsx", "gtools", "taxize", "plyr"))
library(phyloseq)
library(devtools)
library(phyloseq)
source("https://bioconductor.org/biocLite.R")
biocLite("micropower")
source("https://bioconductor.org/biocLite.R")
library(devtools)
source("https://bioconductor.org/biocLite.R")
library(ggplot2)
library(HMP)
library(micropower)
library(microbiome)
library(micropower)
update.packages(checkBuilt=TRUE, ask=FALSE)
library(micropower)
obs <- 1:10
sim <- 1:10
nrmse(sim, obs)
library(nrmse)
install.packages("hydroGOF")
nrmse(sim, obs)
library(nrmse)
library(hydroGOF)
nrmse(sim, obs)
obs
sim
nrmse(sim, obs)
obs <- 1:10
sim <- 2:11
nrmse(sim, obs)
nrmse
obs
sim
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Generating a simulated daily time series, initially equal to the observed series
sim <- obs
# Computing the normalized root mean squared error for the "best" (unattainable) case
nrmse(sim=sim, obs=obs)
# Randomly changing the first 2000 elements of 'sim', by using a normal distribution
# with mean 10 and standard deviation equal to 1 (default of 'rnorm').
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new normalized root mean squared error
nrmse(sim=sim, obs=obs)
detach("package:hydroGOF", unload=TRUE)
data(efc)
fit <- lm(barthtot ~ c160age + c12hour, data = efc)
library(lme4)
install.packages("lme4")
library(lme4)
fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
rmse(fit)
install.packages("sjmisc")
library(sjmisc)
data(efc)
fit <- lm(barthtot ~ c160age + c12hour, data = efc)
rmse(fit)
fit
version(phyloseq)
install.packages("phyloseq")
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
install.packages("GGally")
detach("package:grDevices", unload=TRUE)
install.packages("GGally")
install.packages("gridBase")
install.packages("Grid2Polygons")
install.packages("gridGraphics")
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:grid", unload=TRUE)
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(grid)
update(grid)
install.packages("gridGraphviz")
install.packages("gridGraphics")
install.packages("grid")
detach("package:grid", unload=TRUE)
install.packages("grid")
require(devtools)
install_github("mani2012/PathoStat", build_vignettes=TRUE, auth_token="dadf36cdaef71a2f761f193862a8f6f3f36e3966")
library(dplyr)
require(DT)
require(PathoStat)
nbatch <- 11
ncond <- 3
npercond <- 11
subject_id <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,10, 10, 10, 12, 12, 12, 13, 13, 13, 15, 15, 15)
batch <- unlist(lapply(subject_id, FUN=function(id) {paste("Person", id)}))
diet <- c(1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 3,2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 1)
diet_key <- c("simple", "refined", "unrefined")
condition <- diet_key[diet]
example_data_dir <- system.file("example/data", package = "PathoStat")
runPathoStat(input_dir=example_data_dir, batch=batch, condition=condition, report_file="pathostat_report.html", report_dir=".", report_option_binary="111111111", view_report=FALSE, interactive=TRUE)
require(PathoStat)
library("BatchQC")
install.packages("PopGenome")
library(PopGenome)
install.packages("ff")
library(PopGenome)
require(devtools)
library(dplyr)
require(DT)
require(PathoStat)
nbatch <- 11
ncond <- 3
npercond <- 11
subject_id <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,10, 10, 10, 12, 12, 12, 13, 13, 13, 15, 15, 15)
batch <- unlist(lapply(subject_id, FUN=function(id) {paste("Person", id)}))
diet <- c(1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 3,2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 1)
diet_key <- c("simple", "refined", "unrefined")
condition <- diet_key[diet]
#example 1
example_data_dir <- system.file("example/data", package = "PathoStat")
runPathoStat(input_dir=example_data_dir, batch=batch, condition=condition, report_file="pathostat_report.html", report_dir=".", report_option_binary="111111111", view_report=FALSE, interactive=TRUE)
install.packages("PopGenome")
require(devtools)
install_github("mani2012/PathoStat", build_vignettes=TRUE, auth_token="dadf36cdaef71a2f761f193862a8f6f3f36e3966")
source("https://bioconductor.org/biocLite.R")
biocLite(c('pander', 'MCMCpack', 'limma', 'preprocessCore', 'stringi', 'corpcor', 'matrixStats', 'shiny', 'ggvis', 'd3heatmap', 'reshape2','scales', 'rentrez', 'devtools'))
install_github("mani2012/PathoStat", build_vignettes=TRUE, auth_token="dadf36cdaef71a2f761f193862a8f6f3f36e3966")
install.packages("dplyr")
library(dplyr)
require(DT)
require(PathoStat)
vignette('PathoStatIntro', package='PathoStat')
nbatch <- 11
ncond <- 3
npercond <- 11
subject_id <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,10, 10, 10, 12, 12, 12, 13, 13, 13, 15, 15, 15)
batch <- unlist(lapply(subject_id, FUN=function(id) {paste("Person", id)}))
diet <- c(1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 3,2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 1)
diet_key <- c("simple", "refined", "unrefined")
condition <- diet_key[diet]
#example 1
example_data_dir <- system.file("example/data", package = "PathoStat")
runPathoStat(input_dir=example_data_dir, batch=batch, condition=condition, report_file="pathostat_report.html", report_dir=".", report_option_binary="111111111", view_report=FALSE, interactive=TRUE)
library(PathoStat)
nbatch <- 11
ncond <- 3
npercond <- 11
#batch <- rep(1:nbatch, each=ncond*npercond/nbatch)
subject_id <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,
10, 10, 10, 12, 12, 12, 13, 13, 13, 15, 15, 15)
batch <- unlist(lapply(subject_id, FUN=function(id) {paste("Person", id)}))
#condition <- rep(1:ncond, each=npercond)
diet <- c(1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 3,
2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 1)
diet_key <- c("simple", "refined", "unrefined")
condition <- diet_key[diet]
example_data_dir <- system.file("example/data", package = "PathoStat")
### apply PathoStat
runPathoStat(input_dir=example_data_dir, batch=batch, condition=condition, report_file="pathostat_report.html", report_dir=".", report_option_binary="111111111", view_report=FALSE, interactive=TRUE)
shiny::runApp('Desktop/shiny/training')
library(ggplot2)
library(genoPlotR)
temp = list.files(pattern="*.DNASEGcsv")
if (length(temp)>1) {
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
}else{
df<-read.csv(temp,header = F)
colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
df<-list(dna_seg(df))
}
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
if (length(temp)>1) {
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
}else{
df<-read.csv(temp,header = F)
colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
df<-list(dna_seg(df))
}
gbknames
temp = list.files(pattern="*.DNASEGcsv")
if (length(temp)>1) {
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
}else{
df<-read.csv(temp,header = F)
colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
df<-list(dna_seg(df))
}
df<-read.csv(temp,header = F)
temp
rm(list=ls())
library(ggplot2)
library(genoPlotR)
getwd()
setwd("Desktop/multiGenomicContext/example/")
temp = list.files(pattern="*.DNASEGcsv")
if (length(temp)>1) {
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
}else{
df<-read.csv(temp,header = F)
colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
df<-list(dna_seg(df))
}
uniqnames<-unique(do.call(rbind.data.frame, df)["name"])
colors<-(palette(rainbow(length(as.matrix(uniqnames)))))
df2color<-data.frame(as.matrix(uniqnames),as.matrix(colors))
uniqnames
length(as.matrix(uniqnames))
colors
length(as.matrix(uniqnames)))
length(as.matrix(uniqnames))
colors<-palette(rainbow(length(as.matrix(uniqnames))))
colors
df2color<-data.frame(as.matrix(uniqnames),as.matrix(colors))
df2color<-t(df2color)
colnames(df2color)<-df2color[1,]
df2color<- df2color[-1,]
df<-lapply(df,function(x){x["col"]<-df2color[x$name];x})
temp = list.files(pattern="*.ANNOTcsv")
if (length(temp)>1) {
dfa<-lapply(temp, read.csv, header = FALSE)
dfa<-lapply(dfa,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
dfa<-lapply(dfa,function(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = NA,
rot = 40)})
}else{
dfa<-read.csv(temp,header = F)
colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
dfa<-annotation(x1=c(as.matrix(dfa$x1)), x2=NA, text =c(as.matrix(dfa$text)),
col = NA,
rot = 40)
}
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9)
colors<-palette(rainbow(length(as.matrix(uniqnames))))
colors
palette(rainbow(length(as.matrix(uniqnames))))
colors<-print(palette(rainbow(length(as.matrix(uniqnames)))))
colors<- palette(rainbow(length(as.matrix(uniqnames))))
colors
uniqnames
as.matrix(uniqnames))
length(c(uniqnames))
length(as.data.frame(uniqnames))
list(uniqnames)
length(list(uniqnames))
length(uniqnames[1,]
)
uniqnames[,1]
length(uniqnames[,1])
colors<- palette(rainbow(length(uniqnames[,1])))
colors
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
length(uniqnames[,1])
pie(rep(1,n), col=sample(color, length(uniqnames[,1])))
pie(rep(1,length(uniqnames[,1])), col=sample(color, length(uniqnames[,1])))
col=sample(color, length(uniqnames[,1])))
sample(color, length(uniqnames[,1]))
colors<-sample(color, length(uniqnames[,1]))
df2color<-data.frame(as.matrix(uniqnames),as.matrix(colors))
df2color<-t(df2color)
colnames(df2color)<-df2color[1,]
df2color<- df2color[-1,]
df<-lapply(df,function(x){x["col"]<-df2color[x$name];x})
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9)
legend("right", legend = c("gen1","gen2"),
ncol = 1,
xpd = NA, cex = 0.8,  bty="n",
fill=c("red","blue"),
border = c("white"),
title = "COG Categories")
legend("right", legend = c("gen1","gen2"),
ncol = 1,
xpd = NA, cex = 0.8,  bty="n",
fill=c("red","blue"),
border = c("white"),
title = "COG Categories")
dev.off()
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9)
legend("right", legend = c("gen1","gen2"),
ncol = 1,
xpd = NA, cex = 0.8,  bty="n",
fill=c("red","blue"),
border = c("white"),
title = "COG Categories")
dev.off()
legend("right", legend = c("gen1","gen2"),
ncol = 1,
xpd = NA, cex = 0.8,  bty="n",
fill=c("red","blue"),
border = c("white"),
title = "COG Categories")
dev.off()
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9)
legend("right", legend = c("gen1","gen2"),
ncol = 1,
xpd = NA, cex = 0.8,  bty="n",
fill=c("red","blue"),
border = c("white"),
title = "COG Categories")
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9,plot_new = T)
legend("right", legend = c("gen1","gen2"),
ncol = 1,
xpd = NA, cex = 0.8,  bty="n",
fill=c("red","blue"),
border = c("white"),
title = "COG Categories")
dev.off()
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9)
legend("right", legend = c("gen1","gen2"),
ncol = 1,
xpd = NA, cex = 0.8,  bty="n",
fill=c("red","blue"),
border = c("white"),
title = "COG Categories")
dev.off()
par(mar=c(2,2,2,2))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="", main="")
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9)
legend("right", legend = c("gen1","gen2"),
ncol = 1,
xpd = NA, cex = 0.8,  bty="n",
fill=c("red","blue"),
border = c("white"),
title = "COG Categories")
