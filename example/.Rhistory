annotation_grobs[[i]] <- list()
for (j in 1:length(dna_subsegs[[i]])){
annot <- trim.annotation(annotations[[i]],
xlims[[i]][j, c("x0", "x1")])
annotation_grobs[[i]][[j]] <- annotation_grob(annot,
annotation_cex)
}
### scale ###
if (scale){
scale_grob <- scale_grob(max_length)
scale_h <- 1
} else {
scale_h <- 0
}
### main title ###
if (!is.null(main)){
main_grob <- textGrob(x=main_x, label=main,
gp=gpar(cex=1.2), just=main_just)
main_h <- 1.8
} else {
main_h <- 0
}
### tree ###
if (!is.null(tree)){
# tree
#phylog <- newick2phylog(tree)
# check that a nice permutation is OK, return ys
y <- permute_tree(tree, dna_seg_labels)
# feed tree grob with permutation transformed as y coords
tree_grob <- phylog_grob(tree, 1-((y-1)/(n_dna_segs-1)),
clabel.leaves=dna_seg_label_cex,
clabel.nodes=tree_branch_labels_cex,
tree.scale=tree_scale)
#tree_w <- unit(0.20, "npc")
tree_w <- unit(0.1, "npc") + tree_grob$width
} else if(!is.null(dna_seg_labels)){
# just labels
tree_grob <- dna_seg_label_grob(dna_seg_labels, cex=dna_seg_label_cex,
col=dna_seg_label_col)
tree_w <- tree_grob$width
} else {
# nothing
tree_grob <- NULL
tree_w <- unit(0, "npc")
}
if (!is.null(tree_width)) tree_w <- unit(tree_width, "inches")
# reset scale_h if tree_scale is true
if (tree_scale) scale_h <- 1
#----------------------------------------------------------------------------#
# plotting
#----------------------------------------------------------------------------#
# overall frame
if (plot_new) grid.newpage()
pushViewport(viewport(width=unit(1, "npc")-unit(1, "lines"),
height=unit(1, "npc")-unit(1, "lines"),
name="oma"),
viewport(layout=grid.layout(2, 1,
heights=unit(c(main_h, 1),
c("lines", "null"))),
name="oma_layout"))
# main title
if (!is.null(main)) {
pushViewport(viewport(layout.pos.row=1, name="main"))
grid.draw(main_grob)
upViewport()
}
# frame: columns=tree,maps,legend rows=maps+tree+legend,scale
seg_plot_yaxis_w <- if (seg_plot_yaxis > 0 &&
!is.null(seg_plots[[longest_segment]]))
unit(3, "grobwidth", data=seg_plot_yaxis_grobs[[longest_segment]])
else unit(0, "null")
pushViewport(viewport(layout.pos.row=2,
layout=grid.layout(2, 3,
heights=unit(c(1, scale_h), c("null", "lines")),
widths=unit.c(tree_w, unit(1, "null"),
seg_plot_yaxis_w)),
name="frame"))
# scale
if (scale) {
pushViewport(viewport(layout.pos.row=2, layout.pos.col=2,
xscale=c(0, max_length), name="scale"))
grid.draw(scale_grob)
upViewport()
}
# tree or labels. Height is 1-3 lines because margin is 2 in plotarea,
# and 1 to center to the middle of each dna_seg (1/2 line top and bottom)
if (!is.null(tree_grob)){
# extra margin if there is an annotation in the first dna_seg
annot_margin <- unit(if (is.null(annotations[[1]])) 0 else
annotation_height, "lines")
# extra margin is there is a seg_plot in the first dna_seg
seg_plot_margin <- unit(if (is.null(seg_plot_grobs[[1]][[1]])) 0 else
seg_plot_height, seg_plot_height_unit)
# make a supplementary margin if there is a scale in the last
# dna_seg to get labels facing the text. Hack.
hli <- unit(0.5, "lines")
dna_scale_margin <- unit(scale_cex * dna_seg_scale[[n_dna_segs]], "lines")
pushViewport(viewport(layout.pos.row=1, layout.pos.col=1,
layout=grid.layout(6, 1,
heights=unit.c(seg_plot_margin, annot_margin, hli,
unit(n_dna_segs*(1+seg_plot_height), "null"),
hli, dna_scale_margin)),
name="tree_outer"))
pushViewport(viewport(layout.pos.row=4,
width=unit(1, "npc")-unit(1, "lines"),
just=c("centre", "bottom"),
name="tree"))
grid.draw(tree_grob$grob)
upViewport(2) # up tree & tree_outer vp
}
# plotting area
pushViewport(viewport(layout.pos.row=1, layout.pos.col=2,
name="plotarea_outer", clip="on"),
viewport(width=unit(1, "npc")-unit(1, "lines"),
height=unit(1, "npc")-unit(0, "lines"),
name="plotarea", clip="off"))
# map grid
pushViewport(viewport(layout=grid.layout(n_rows, 1,
heights=dna_seg_heights), name="map"))
### comparisons ###
if (n_comparisons > 0){
for (i in 1:n_comparisons){
pushViewport(viewport(layout.pos.row=3*i,
yscale=c(0,1),
xscale=c(0, max_length),
#clip="on",
name = paste("comparison", i, sep=".")))
# draw comparison grobs
grid.draw(comparison_grobs[[i]])
upViewport() # pop comparisons[[i]] vp
}
### seg_plots, dna_segs, annotations, scales ###
for (i in 1:n_dna_segs){
n_dna_subsegs <- length(dna_subsegs[[i]])
n_cols <- n_dna_subsegs*2+1
widths <- numeric(n_cols)/2
widths[1:n_dna_subsegs*2] <- xlims[[i]]$length
widths[1:n_dna_subsegs*2-1] <- offsets[[i]]
widths_units <- unit(widths, rep("native", n_cols))
heights <- unit(c(annot_h[i], 1, scale_cex*dna_seg_scale[i]),
c("lines", "null", "lines"))
# push seg_plot grid
pushViewport(viewport(layout.pos.row=3*i-2,
layout=grid.layout(1, n_cols,
widths=widths_units,
just=c("left", "centre")),
#clip="on",
xscale=c(0,max_length),
name=paste("seg_plot", i, sep=".")))
for (j in 1:n_dna_subsegs){
idx <- if (xlims[[i]]$strand[j] == 1) c("x0", "x1") else c("x1", "x0")
xscale <- as.numeric(xlims[[i]][j,idx])
if (!is.null(seg_plots[[i]])){
pushViewport(viewport(layout.pos.col=j*2,
yscale=seg_plot_ylims[[i]],
xscale=xscale,
just=c("left", "centre"),
name=paste("seg_subplot", i, j, sep=".")))
grid.draw(seg_plot_grobs[[i]][[j]])
upViewport() # up seg_subplot vp
}
## Draw y axis
if (!is.null(seg_plots[[i]]) && seg_plot_yaxis > 0){
pushViewport(viewport(layout.pos.col=n_cols,
yscale=seg_plot_ylims[[i]],
width=unit(1, "grobwidth",
data=seg_plot_yaxis_grobs[[i]]),
just=c("left", "centre"),
name=paste("seg_plot_yaxis", i, sep=".")))
grid.draw(seg_plot_yaxis_grobs[[i]])
upViewport() # up seg plot yaxis
}
upViewport() # up seg_plot vp
# push dna_seg grid (subsegments in cols, annotations, genes and
# scales in rows)
pushViewport(viewport(layout.pos.row=3*i-1,
layout=grid.layout(3, n_cols,
heights=heights,
widths=widths_units,
just=c("left", "centre")),
#clip="on",
xscale=c(0,max_length),
name=paste("scale_and_dna_seg", i, sep=".")))
for (j in 1:n_dna_subsegs){
# calculate xscale
idx <- if (xlims[[i]]$strand[j] == 1) c("x0", "x1") else c("x1", "x0")
xscale <- as.numeric(xlims[[i]][j,idx])
# annotation
if (!is.null(annotations[[i]])){
pushViewport(viewport(layout.pos.row=1,
layout.pos.col=j*2,
yscale=c(0,1),
xscale=xscale,
just=c("left", "centre"),
name=paste("annotation", i, j, sep=".")))
grid.draw(annotation_grobs[[i]][[j]])
upViewport() # up annotation vp
}
# dna_seg_scale
if (dna_seg_scale[i]){
pushViewport(viewport(layout.pos.row=3,
layout.pos.col=j*2,
yscale=c(0,1),
xscale=xscale,
just=c("left", "centre"),
name=paste("dna_seg_scale", i, j, sep=".")))
grid.draw(dna_seg_scale_grobs[[i]][[j]])
upViewport() # up dna_seg_scale vp
}
# dna_seg itself
pushViewport(viewport(layout.pos.row=2,
layout.pos.col=j*2,
yscale=c(0,1),
xscale=xscale,
just=c("left", "centre"),
name = paste("dna_seg", i, j, sep=".")))
# draw segment line
if (!dna_seg_line[i]=="FALSE"){
grid.segments(x0=unit(xlims[[i]]$x0[j], "native"),
y0=unit(0.5, "native"),
x1=unit(xlims[[i]]$x1[j], "native"),
y1=unit(0.5, "native"),
name=paste("dna_seg_line", i, j, sep="."),
gp=gpar(col=dna_seg_line[i]))
}
# draw dna_seg grobs
grid.draw(dna_seg_grobs[[i]][[j]])
upViewport() # up dna_seg
# draw gap, but not at pos 1
if (j > 1){
pushViewport(viewport(layout.pos.row=2,
layout.pos.col=j*2-1,
yscale=c(0,1),
xscale=c(0, widths[2*j-1]),
just=c("centre", "centre"),
name=paste("gap", i, j, sep=".")))
grid.draw(gap_grob(w=def_gap_length, m=widths[2*j-1]/2, i, j))
upViewport() # up gap vp
}
upViewport() # up scale_and_dna_seg vp
}
upViewport(2) # pop map viewports
upViewport(2) # pop plotarea viewport
upViewport(2) # pop frame+oma viewport
}
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9,plot_new = F,main = "Genomic Context\n")
library(genoPlotR)
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9,plot_new = F,main = "Genomic Context\n")
rm(list=ls())
library(ggplot2)
library(genoPlotR)
library(cowplot)
temp = list.files(pattern="*.DNASEGcsv")
if (length(temp)>1) {
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
}else{
df<-read.csv(temp,header = F)
colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
df<-list(dna_seg(df))
}
uniqnames<-unique(do.call(rbind.data.frame, df)["name"])
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
colors<-sample(color, length(uniqnames[,1]))
df2color<-data.frame(as.matrix(uniqnames),as.matrix(colors))
df2color<-t(df2color)
colnames(df2color)<-df2color[1,]
df2color<- df2color[-1,]
df<-lapply(df,function(x){x["col"]<-df2color[x$name];x})
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9,plot_new = F,main = "Genomic Context\n")
?pdf()
gbknames
gbknames[[1]]
gbknames[[1]]<-"                     test"
names(df)<-gbknames
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9,plot_new = F,main = "Genomic Context\n")
dev.off()
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9,plot_new = F,main = "Genomic Context\n")
legend("left", legend = c("gen1","gen2"),ncol = 1,xpd = NA, cex = 0.8,  bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("left", legend = c("gen1","gen2"),ncol = 1,xpd = NA, cex = 0.8,  bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9,plot_new = F,main = "Genomic Context\n")
par(mar=c(2,2,2,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("left", legend = c("gen1","gen2"),ncol = 1,xpd = NA, cex = 0.8,  bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
par(mar=c(2,2,2,-1))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
dev.off()
par(mar=c(2,2,2,-1))
par(mar=c(2,2,0,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("left", legend = c("gen1","gen2"),ncol = 1,xpd = NA, cex = 0.8,  bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9,plot_new = F,main = "Genomic Context\n")
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
names(df)<-gbknames
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9,plot_new = F,main = "Genomic Context\n")
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9,main = "Genomic Context\n")
par(mar=c(2,2,0,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("left", legend = c("gen1","gen2"),ncol = 1,xpd = NA, cex = 0.8,  bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
legend("center", legend = c("gen1","gen2"),ncol = 1,xpd = NA, cex = 0.8,  bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
dev.off()
uniqnames
c(uniqnames)
as.character(uniqnames)
c(as.character(uniqnames))
c(df2color)
legend("center", legend = as.character(uniqnames),ncol = 1,xpd = NA, cex = 0.8,  bty="n",fill=c(df2color),border = c("white"),title = "Genes")
par(mar=c(2,2,0,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("center", legend = as.character(uniqnames),ncol = 1,xpd = NA, cex = 0.8,  bty="n",fill=c(df2color),border = c("white"),title = "Genes")
df2color
legend("center", legend = c(uniqnames),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(df2color),border = c("white"),title = "Genes")
par(mar=c(2,2,0,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("center", legend = c(uniqnames),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(df2color),border = c("white"),title = "Genes")
df2color
c(t(df2color))
legend("center", legend = c(uniqnames),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(t(df2color)),border = c("white"),title = "Genes")
par(mar=c(2,2,0,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("center", legend = c(uniqnames),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(t(df2color)),border = c("white"),title = "Genes")
df2color
df2color[1,]
df2color[1]
df2color[,1]
df2color
c(df2color)
legend("center", legend = colnames(df2color),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(df2color),border = c("white"),title = "Genes")
colnames(df2color)
df
legend("center", legend = c(uniqnames),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(colors),border = c("white"),title = "Genes")
legend("center", legend = c(uniqnames),ncol = 2,xpd = NA, cex = 0.8,
bty="n",fill=c(colors),border = c("white"),title = "Genes")
par(mar=c(2,2,0,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("center", legend = c(uniqnames),ncol = 2,xpd = NA, cex = 0.8,
bty="n",fill=c(colors),border = c("white"),title = "Genes")
c(uniqnames)
c(colors)
legend("center", legend = c(uniqnames),ncol = 2,xpd = NA, cex = 0.8,
bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("center", legend = c(uniqnames),ncol = 2,xpd = NA, cex = 0.8,
bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
legend("center", legend = c("uniqnames","asd"),ncol = 2,xpd = NA, cex = 0.8,
bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
par(mar=c(2,2,0,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("center", legend = c("uniqnames","asd"),ncol = 2,xpd = NA, cex = 0.8,
bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("center", legend = c("uniqnames","asd"),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
legend("center", legend = c(uniqnames),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("center", legend = c(uniqnames),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
uniqnames
c(as.matrix(uniqnames))
legend("center", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
par(mar=c(2,2,0,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("center", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c("red","blue"),border = c("white"),title = "Genes")
as.matrix(colors)
par(mar=c(2,2,0,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("center", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,2,0,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("rigth", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
legend("right", legend = c(as.matrix(gsub(pattern = "_",x = as.matrix(uniqnames),replacement = " "))),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(gsub(pattern = "_",x = as.matrix(uniqnames),replacement = " "))),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
correctnames<-gsub(pattern = "_",x = as.matrix(uniqnames),replacement = " ")
correctnames
uniqnames<-gsub(pattern = "_",x = as.matrix(uniqnames),replacement = " ")
uniqnames<-gsub(pattern = "[.]",x = as.matrix(uniqnames),replacement = ",")
uniqnames
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,2,2,2))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
uniqnames<-gsub(pattern = "_",x = as.matrix(uniqnames),replacement = " ")
uniqnames<-gsub(pattern = "[.]",x = as.matrix(uniqnames),replacement = ",")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(0,0,0,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,0,0,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(5,0,0,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,2,2,2))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,2,2,5))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,2,2,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,2,2,5))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,0,2,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,5,2,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,2,5,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9,main = paste("Genomic Context",Pname,sep=" "))
par(mar=c(5,2,2,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(5,2,2,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,2,2,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,2,2,5))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,2,2,-2))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
par(mar=c(2,2,2,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
uniqnames
sort(uniqnames)
setwd("Desktop/multiGenomicContext/example/")
temp = list.files(pattern="*.DNASEGcsv")
if (length(temp)>1) {
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
}else{
df<-read.csv(temp,header = F)
colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
df<-list(dna_seg(df))
}
uniqnames<-unique(do.call(rbind.data.frame, df)["name"])
uniqnames
uniqnames<-sort(uniqnames)
sort(uniqnames)
uniqnames<-sort(uniqnames[,1])
uniqnames
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
colors<-sample(color, length(uniqnames))
colors
df2color<-data.frame(as.matrix(uniqnames),as.matrix(colors))
df2color<-t(df2color)
colnames(df2color)<-df2color[1,]
df2color<- df2color[-1,]
df<-lapply(df,function(x){x["col"]<-df2color[x$name];x})
uniqnames<-gsub(pattern = "_",x = as.matrix(uniqnames),replacement = " ")
uniqnames<-gsub(pattern = "[.]",x = as.matrix(uniqnames),replacement = ",")
par(mar=c(2,2,2,0))
plot(c(0,1000), c(0,1000), type="n", axes=FALSE, xlab="", ylab="")
legend("right", legend = c(as.matrix(uniqnames)),ncol = 1,xpd = NA, cex = 0.8,
bty="n",fill=c(as.matrix(colors)),border = c("white"),title = "Genes")
plot_gene_map(dna_segs = df,dna_seg_label_cex = 0.9,main = paste("Genomic Context",Pname,sep=" "))
require(devtools)
install_github("mani2012/PathoStat", build_vignettes=TRUE, auth_token="dadf36cdaef71a2f761f193862a8f6f3f36e3966")
library(PathoStat)
vignette('PathoStatIntro', package='PathoStat')
runPathoStat()
