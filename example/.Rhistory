rdata["V6"][i,]<-getcolor(rdata["Cog"][i,])
}
mymedian<-median(gcdata$gccontent)
#mean(gcdata$gccontent)
#class(gcdata["gccontent"])
#head(gcdata)
range(gcdata["gccontent"])
range(gcdata["gcskew"])
library(ggplot2)
library(HMP)
library(micropower)
library(microbiome)
data("peerj32")
pseq <- peerj32$phyloseq
pseq.rel <- transform_phyloseq(pseq, "relative.abundance", "OTU")
head(prevalence(pseq.rel, detection.threshold = 1, sort = FALSE))
prevalent.taxa <- prevalent_taxa(pseq.rel, detection.threshold = 1, prevalence.threshold = 80)
#core microbiota 2d line plots
# With absolute read counts
det <- c(0, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 1e4)
res <- plot_core(pseq, prevalence.intervals = prev, detection.thresholds = det, plot.type = "lineplot")
res$plot + xlab("Abundance (OTU read count)")
res <- plot_core(pseq, prevalence.intervals = prev, detection.thresholds = det, plot.type = "lineplot")
prev
det <- c(0, 0.1, 0.2, 0.5, 1, 2, 5, 10, 20)
prev <- seq(10, 100, 10)
core <- core_matrix(pseq.rel, prevalence.intervals = prev, detection.thresholds = det)
pseq.rel <- transform_phyloseq(pseq, "relative.abundance", "OTU")
#List prevalence for each group at 1 percent relative abundance abundance threshold:
head(prevalence(pseq.rel, detection.threshold = 1, sort = FALSE))
prevalent.taxa <- prevalent_taxa(pseq.rel, detection.threshold = 1, prevalence.threshold = 80)
#core microbiota 2d line plots
# With absolute read counts
det <- c(0, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 1e4)
res <- plot_core(pseq, prevalence.intervals = prev, detection.thresholds = det, plot.type = "lineplot")
res$plot + xlab("Abundance (OTU read count)")
library(OmicCircos)
citation("OmicCircos")
library(phyloseq)
library(devtools)
install.packages("devtools")
source("https://bioconductor.org/biocLite.R")
biocLite("biomformat")
library(biomformat)
biocLite(c("GO.db"))
install_github("microbiome/microbiome") # Install the package
library(devtools)
install_github("microbiome/microbiome") # Install the package
install_github("ropensci/rdryad") # Install proposed package
install_github("antagomir/netresponse") # Install proposed package
install.packages(c("gridExtra", "earlywarnings"))
biocLite("phyloseq")
library(xlsx)
install.packages(c("xlsx", "gtools", "taxize", "plyr"))
library(phyloseq)
library(devtools)
library(phyloseq)
source("https://bioconductor.org/biocLite.R")
biocLite("micropower")
source("https://bioconductor.org/biocLite.R")
library(devtools)
source("https://bioconductor.org/biocLite.R")
library(ggplot2)
library(HMP)
library(micropower)
library(microbiome)
library(micropower)
update.packages(checkBuilt=TRUE, ask=FALSE)
library(micropower)
obs <- 1:10
sim <- 1:10
nrmse(sim, obs)
library(nrmse)
install.packages("hydroGOF")
nrmse(sim, obs)
library(nrmse)
library(hydroGOF)
nrmse(sim, obs)
obs
sim
nrmse(sim, obs)
obs <- 1:10
sim <- 2:11
nrmse(sim, obs)
nrmse
obs
sim
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Generating a simulated daily time series, initially equal to the observed series
sim <- obs
# Computing the normalized root mean squared error for the "best" (unattainable) case
nrmse(sim=sim, obs=obs)
# Randomly changing the first 2000 elements of 'sim', by using a normal distribution
# with mean 10 and standard deviation equal to 1 (default of 'rnorm').
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new normalized root mean squared error
nrmse(sim=sim, obs=obs)
detach("package:hydroGOF", unload=TRUE)
data(efc)
fit <- lm(barthtot ~ c160age + c12hour, data = efc)
library(lme4)
install.packages("lme4")
library(lme4)
fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
rmse(fit)
install.packages("sjmisc")
library(sjmisc)
data(efc)
fit <- lm(barthtot ~ c160age + c12hour, data = efc)
rmse(fit)
fit
version(phyloseq)
install.packages("phyloseq")
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
install.packages("GGally")
detach("package:grDevices", unload=TRUE)
install.packages("GGally")
install.packages("gridBase")
install.packages("Grid2Polygons")
install.packages("gridGraphics")
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:grid", unload=TRUE)
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(grid)
update(grid)
install.packages("gridGraphviz")
install.packages("gridGraphics")
install.packages("grid")
detach("package:grid", unload=TRUE)
install.packages("grid")
require(devtools)
install_github("mani2012/PathoStat", build_vignettes=TRUE, auth_token="dadf36cdaef71a2f761f193862a8f6f3f36e3966")
library(dplyr)
require(DT)
require(PathoStat)
nbatch <- 11
ncond <- 3
npercond <- 11
subject_id <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,10, 10, 10, 12, 12, 12, 13, 13, 13, 15, 15, 15)
batch <- unlist(lapply(subject_id, FUN=function(id) {paste("Person", id)}))
diet <- c(1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 3,2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 1)
diet_key <- c("simple", "refined", "unrefined")
condition <- diet_key[diet]
example_data_dir <- system.file("example/data", package = "PathoStat")
runPathoStat(input_dir=example_data_dir, batch=batch, condition=condition, report_file="pathostat_report.html", report_dir=".", report_option_binary="111111111", view_report=FALSE, interactive=TRUE)
require(PathoStat)
library("BatchQC")
install.packages("PopGenome")
library(PopGenome)
install.packages("ff")
library(PopGenome)
require(devtools)
library(dplyr)
require(DT)
require(PathoStat)
nbatch <- 11
ncond <- 3
npercond <- 11
subject_id <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,10, 10, 10, 12, 12, 12, 13, 13, 13, 15, 15, 15)
batch <- unlist(lapply(subject_id, FUN=function(id) {paste("Person", id)}))
diet <- c(1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 3,2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 1)
diet_key <- c("simple", "refined", "unrefined")
condition <- diet_key[diet]
#example 1
example_data_dir <- system.file("example/data", package = "PathoStat")
runPathoStat(input_dir=example_data_dir, batch=batch, condition=condition, report_file="pathostat_report.html", report_dir=".", report_option_binary="111111111", view_report=FALSE, interactive=TRUE)
install.packages("PopGenome")
require(devtools)
install_github("mani2012/PathoStat", build_vignettes=TRUE, auth_token="dadf36cdaef71a2f761f193862a8f6f3f36e3966")
source("https://bioconductor.org/biocLite.R")
biocLite(c('pander', 'MCMCpack', 'limma', 'preprocessCore', 'stringi', 'corpcor', 'matrixStats', 'shiny', 'ggvis', 'd3heatmap', 'reshape2','scales', 'rentrez', 'devtools'))
install_github("mani2012/PathoStat", build_vignettes=TRUE, auth_token="dadf36cdaef71a2f761f193862a8f6f3f36e3966")
install.packages("dplyr")
library(dplyr)
require(DT)
require(PathoStat)
vignette('PathoStatIntro', package='PathoStat')
nbatch <- 11
ncond <- 3
npercond <- 11
subject_id <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,10, 10, 10, 12, 12, 12, 13, 13, 13, 15, 15, 15)
batch <- unlist(lapply(subject_id, FUN=function(id) {paste("Person", id)}))
diet <- c(1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 3,2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 1)
diet_key <- c("simple", "refined", "unrefined")
condition <- diet_key[diet]
#example 1
example_data_dir <- system.file("example/data", package = "PathoStat")
runPathoStat(input_dir=example_data_dir, batch=batch, condition=condition, report_file="pathostat_report.html", report_dir=".", report_option_binary="111111111", view_report=FALSE, interactive=TRUE)
library(PathoStat)
nbatch <- 11
ncond <- 3
npercond <- 11
#batch <- rep(1:nbatch, each=ncond*npercond/nbatch)
subject_id <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,
10, 10, 10, 12, 12, 12, 13, 13, 13, 15, 15, 15)
batch <- unlist(lapply(subject_id, FUN=function(id) {paste("Person", id)}))
#condition <- rep(1:ncond, each=npercond)
diet <- c(1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 3,
2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 1)
diet_key <- c("simple", "refined", "unrefined")
condition <- diet_key[diet]
example_data_dir <- system.file("example/data", package = "PathoStat")
### apply PathoStat
runPathoStat(input_dir=example_data_dir, batch=batch, condition=condition, report_file="pathostat_report.html", report_dir=".", report_option_binary="111111111", view_report=FALSE, interactive=TRUE)
shiny::runApp('Desktop/shiny/training')
df<-read.csv("PGN_RS06160.DNASEGcsv",header = F)
library(ggplot2)
library(genoPlotR)
df<-read.csv("PGN_RS06160.DNASEGcsv",header = F)
library(ggplot2)
library(genoPlotR)
df<-read.csv("PGN_RS06160.DNASEGcsv",header = F)
setwd("Desktop/multiGenomicContext/example/")
df<-read.csv("PGN_RS06160.DNASEGcsv",header = F)
colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
df<-list(dna_seg(df))
dfa<-read.csv("PGN_RS06160.ANNOTcsv",header = F)
colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
dfa<- annotation(x1=c(as.matrix(dfa$x1)), x2=NA, text =c(as.matrix(dfa$text)),
col = c(as.matrix(dfa$color)),
rot = 40)
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1.3)
temp = list.files(pattern="*.DNASEGcsv")
temp
temp = list.files(pattern="*.DNASEGcsv")
temp
temp = list.files(pattern="*.DNASEGcsv")
temp
df<-lapply(list_of_files, read.csv, header = FALSE)
library(xlsx)
df<-lapply(list_of_files, read.csv, header = FALSE)
detach("package:xlsx", unload=TRUE)
df<-lapply(temp, read.csv, header = FALSE)
df
colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
lapply(df,colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type"))
dna_seg(df)
df
colnames(df)[[@]]<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")})
colnames(df)<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")})
df
colnames(df)
lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df
dna_seg(df)
df
df<-dna_seg(df)
df
plot_gene_map(dna_segs = df, annotation_height = 1.3)
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df
dna_seg(df)
dna_seg(list(df))
list(dna_seg(df))
df
plot_gene_map(dna_segs = df, annotation_height = 1.3)
lapply(df,function(x){dna_seg(x)})
df<-lapply(df,function(x){dna_seg(x)})
plot_gene_map(dna_segs = df, annotation_height = 1.3)
temp
split(temp,".")
gbkname<- temp
gbknames<- temp
names(df)<-gbknames
plot_gene_map(dna_segs = df, annotation_height = 1.3)
strsplit(tmp,".")
strsplit(temp,".")
temp
list(temp)
as.list(temp)
strsplit(as.list(temp),".")
as.list(temp)
as.list(temp)[1]
strsplit(as.list(temp)[1],".")
test<-as.list(temp)[1]
gbknames<- strsplit(test,".")
gbknames<- strsplit(test,"\.")
strsplit(test,"\.")
strsplit(test,"\\.")
strsplit(test,"\..")
strsplit(test,"[.]")
strsplit(test,\.)
strsplit(test,'\.')
strsplit(test,'.')
strsplit(test,as.character('\.'))
strsplit(test,'\\.')
strsplit(test,'\..')
strsplit(test,'[.]')
strsplit(test,'/.')
strsplit(test,'..')
strsplit(test,'#.')
gsub(pattern = ".",replacement = " ",x = test)
gsub(pattern = "\.",replacement = " ",x = test)
gsub(pattern = ".",replacement = " ",x = test)
test
gsub(pattern = ".",replacement = "_",x = test)
gsub(pattern = ".",replacement = "%",x = test)
gsub(pattern = "..",replacement = " ",x = test)
gsub(pattern = ".*",replacement = " ",x = test)
gsub(pattern = ".",replacement = " ",x = test)
gsub(pattern = "/.",replacement = " ",x = test)
gsub(pattern = "[.]",replacement = " ",x = test)
gbknames<- strsplit(test,"[.]")
gsub(pattern = "[.]",replacement = " ",x = test)[1]
split(gsub(pattern = "[.]",replacement = " ",x = test))
split(gsub(pattern = "[.]",replacement = " ",x = test)," ")
split(" ",gsub(pattern = "[.]",replacement = " ",x = test))
split(x = gsub(pattern = "[.]",replacement = " ",x = test), sep = " ")
split(x = gsub(pattern = "[.]",replacement = " ",x = test),f=test ,sep = " ")
split(x = gsub(pattern = "[.]",replacement = " ",x = test),f=temp ,sep = " ")
split(x = gsub(pattern = "[.]",replacement = " ",x = test),f=test ,sep = " ")
split(x = gsub(pattern = "[.]",replacement = " ",x = test),f=f ,sep = " ")
split(x = gsub(pattern = "[.]",replacement = " ",x = test),f=test ,sep = " ")
test<-as.list(temp)
split(x = gsub(pattern = "[.]",replacement = " ",x = test),f=test ,sep = " ")
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),f=test ,sep = " ")
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test))
strsplit(gsub(pattern = "[.]",replacement = " ",x = test))
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),split = c(" "))
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),split = c(" "))[[1]]
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),split = c(" "))[1]
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),split = c(" "))[1][1]
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),split = c(" "))[1,1]
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),split = c(" "))
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),split = c(" "))[[1]][1]
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),split = c(" "))[[,]][1]
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),split = c(" "))[[@]][1]
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),split = c(" "))
temp
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = temp),split = c(" "))
gbknames<- strsplit(x = gsub(pattern = "[.]",replacement = " ",x = temp),split = c(" "))
df
gbknames
gbknames[1]
gbknames[1][1]
gbknames[1][1][1]
gbknames[[]]
gbknames[[1:3]]
gbknames[[1:2]]
gbknames[[1:1]]
gbknames[[1]]
df
names(df)<-gbknames[[]1]
gbknames[[1,1]]
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = temp),split = c(" "))
lapply(temp,function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))})
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = temp),split = c(" "))
temp
test<-"33277.gbk.DNASEGcsv"
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),split = c(" "))
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),split = c(" "))[1]
strsplit(x = gsub(pattern = "[.]",replacement = " ",x = test),split = c(" "))[[1]][1]
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
gbknames
names(df)<-gbknames
plot_gene_map(dna_segs = df, annotation_height = 1.3)
dfa
dfa<-read.csv("PGN_RS06160.ANNOTcsv",header = F)
dfa<-read.csv("33277.gbk.ANNOTcsv",header = F)
colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
dfa<- annotation(x1=c(as.matrix(dfa$x1)), x2=NA, text =c(as.matrix(dfa$text)),
col = c(as.matrix(dfa$color)),
rot = 40)
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1.3)
dfa<-read.csv("381.gbk.ANNOTcsv",header = F)
colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
dfa<- annotation(x1=c(as.matrix(dfa$x1)), x2=NA, text =c(as.matrix(dfa$text)),
col = c(as.matrix(dfa$color)),
rot = 40)
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1.3)
temp = list.files(pattern="*..ANNOTcsv")
temp
dfa<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
df
temp
dfa<-lapply(temp, read.csv, header = FALSE)
df<-lapply(dfa,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
temp = list.files(pattern="*.DNASEGcsv")
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
temp = list.files(pattern="*..ANNOTcsv")
dfa<-lapply(temp, read.csv, header = FALSE)
dfa<-lapply(dfa,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
dfa
dfa<-lapply(dfa,function(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 40)})
dfa
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1.3)
dfa
temp = list.files(pattern="*.ANNOTcsv")
#dfa<-read.csv("381.gbk.ANNOTcsv",header = F)
dfa<-lapply(temp, read.csv, header = FALSE)
dfa<-lapply(dfa,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
dfa<-lapply(dfa,function(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 40)})
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1.3)
dfa<-lapply(dfa,rbind(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 40)})
dfa<-lapply(dfa,rbind(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 40)})
dfa<-lapply(temp, read.csv, header = FALSE)
dfa
dfa<-lapply(dfa,cbind)
dfa
dfa<-lapply(dfa,cbind(x){x})
dfa<-lapply(dfa,append)
dfa<-ldply(dfa,rbind)
dfa<-rbindlist(dfa)
library(data.table)
dfa<-rbindlist(dfa)
dfa
colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
dfa
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1.3)
temp = list.files(pattern="*.ANNOTcsv")
dfa<-lapply(temp, read.csv, header = FALSE)
rbindlist(dfa)[-1]
as.data.frame(rbindlist(dfa))
dfa<-as.data.frame(rbindlist(dfa))
colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1.3)
dfa
temp = list.files(pattern="*.ANNOTcsv")
dfa<-lapply(temp, read.csv, header = FALSE)
dfa<-lapply(dfa,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
dfa<-lapply(dfa,function(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 40)})
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1.3)
dfa
temp = list.files(pattern="*.DNASEGcsv")
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
temp = list.files(pattern="*.ANNOTcsv")
#dfa<-read.csv("381.gbk.ANNOTcsv",header = F)
dfa<-lapply(temp, read.csv, header = FALSE)
#dfa<-as.data.frame(rbindlist(dfa))
#colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
dfa<-lapply(dfa,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
dfa<-lapply(dfa,function(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 40)})
dfa<- annotation(x1=c(as.matrix(dfa$x1)), x2=NA, text =c(as.matrix(dfa$text)),
col = c(as.matrix(dfa$color)),
rot = 40)
dfa<-lapply(dfa,function(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 40)})
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1.3)
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
function (x, value)
{
}
temp = list.files(pattern="*.DNASEGcsv")
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
temp = list.files(pattern="*.ANNOTcsv")
#dfa<-read.csv("381.gbk.ANNOTcsv",header = F)
dfa<-lapply(temp, read.csv, header = FALSE)
#dfa<-as.data.frame(rbindlist(dfa))
#colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
dfa<-lapply(dfa,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
dfa<-lapply(dfa,function(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 40)})
dfa<- annotation(x1=c(as.matrix(dfa$x1)), x2=NA, text =c(as.matrix(dfa$text)),
}
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1.3)
temp = list.files(pattern="*.DNASEGcsv")
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
temp = list.files(pattern="*.ANNOTcsv")
#dfa<-read.csv("381.gbk.ANNOTcsv",header = F)
dfa<-lapply(temp, read.csv, header = FALSE)
#dfa<-as.data.frame(rbindlist(dfa))
#colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
dfa<-lapply(dfa,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
dfa<-lapply(dfa,function(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 40)})
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1.3)
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 0)
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 0.1)
plot_gene_map(dna_segs = df, annotations = dfa)
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1.3)
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 10)
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 15)
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1)
