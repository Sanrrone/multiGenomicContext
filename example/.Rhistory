nrmse(sim, obs)
library(nrmse)
library(hydroGOF)
nrmse(sim, obs)
obs
sim
nrmse(sim, obs)
obs <- 1:10
sim <- 2:11
nrmse(sim, obs)
nrmse
obs
sim
data(EgaEnEstellaQts)
obs <- EgaEnEstellaQts
# Generating a simulated daily time series, initially equal to the observed series
sim <- obs
# Computing the normalized root mean squared error for the "best" (unattainable) case
nrmse(sim=sim, obs=obs)
# Randomly changing the first 2000 elements of 'sim', by using a normal distribution
# with mean 10 and standard deviation equal to 1 (default of 'rnorm').
sim[1:2000] <- obs[1:2000] + rnorm(2000, mean=10)
# Computing the new normalized root mean squared error
nrmse(sim=sim, obs=obs)
detach("package:hydroGOF", unload=TRUE)
data(efc)
fit <- lm(barthtot ~ c160age + c12hour, data = efc)
library(lme4)
install.packages("lme4")
library(lme4)
fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
rmse(fit)
install.packages("sjmisc")
library(sjmisc)
data(efc)
fit <- lm(barthtot ~ c160age + c12hour, data = efc)
rmse(fit)
fit
version(phyloseq)
install.packages("phyloseq")
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
install.packages("GGally")
detach("package:grDevices", unload=TRUE)
install.packages("GGally")
install.packages("gridBase")
install.packages("Grid2Polygons")
install.packages("gridGraphics")
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:grid", unload=TRUE)
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(grid)
update(grid)
install.packages("gridGraphviz")
install.packages("gridGraphics")
install.packages("grid")
detach("package:grid", unload=TRUE)
install.packages("grid")
require(devtools)
install_github("mani2012/PathoStat", build_vignettes=TRUE, auth_token="dadf36cdaef71a2f761f193862a8f6f3f36e3966")
library(dplyr)
require(DT)
require(PathoStat)
nbatch <- 11
ncond <- 3
npercond <- 11
subject_id <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,10, 10, 10, 12, 12, 12, 13, 13, 13, 15, 15, 15)
batch <- unlist(lapply(subject_id, FUN=function(id) {paste("Person", id)}))
diet <- c(1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 3,2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 1)
diet_key <- c("simple", "refined", "unrefined")
condition <- diet_key[diet]
example_data_dir <- system.file("example/data", package = "PathoStat")
runPathoStat(input_dir=example_data_dir, batch=batch, condition=condition, report_file="pathostat_report.html", report_dir=".", report_option_binary="111111111", view_report=FALSE, interactive=TRUE)
require(PathoStat)
library("BatchQC")
install.packages("PopGenome")
library(PopGenome)
install.packages("ff")
library(PopGenome)
require(devtools)
library(dplyr)
require(DT)
require(PathoStat)
nbatch <- 11
ncond <- 3
npercond <- 11
subject_id <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,10, 10, 10, 12, 12, 12, 13, 13, 13, 15, 15, 15)
batch <- unlist(lapply(subject_id, FUN=function(id) {paste("Person", id)}))
diet <- c(1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 3,2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 1)
diet_key <- c("simple", "refined", "unrefined")
condition <- diet_key[diet]
#example 1
example_data_dir <- system.file("example/data", package = "PathoStat")
runPathoStat(input_dir=example_data_dir, batch=batch, condition=condition, report_file="pathostat_report.html", report_dir=".", report_option_binary="111111111", view_report=FALSE, interactive=TRUE)
install.packages("PopGenome")
require(devtools)
install_github("mani2012/PathoStat", build_vignettes=TRUE, auth_token="dadf36cdaef71a2f761f193862a8f6f3f36e3966")
source("https://bioconductor.org/biocLite.R")
biocLite(c('pander', 'MCMCpack', 'limma', 'preprocessCore', 'stringi', 'corpcor', 'matrixStats', 'shiny', 'ggvis', 'd3heatmap', 'reshape2','scales', 'rentrez', 'devtools'))
install_github("mani2012/PathoStat", build_vignettes=TRUE, auth_token="dadf36cdaef71a2f761f193862a8f6f3f36e3966")
install.packages("dplyr")
library(dplyr)
require(DT)
require(PathoStat)
vignette('PathoStatIntro', package='PathoStat')
nbatch <- 11
ncond <- 3
npercond <- 11
subject_id <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,10, 10, 10, 12, 12, 12, 13, 13, 13, 15, 15, 15)
batch <- unlist(lapply(subject_id, FUN=function(id) {paste("Person", id)}))
diet <- c(1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 3,2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 1)
diet_key <- c("simple", "refined", "unrefined")
condition <- diet_key[diet]
#example 1
example_data_dir <- system.file("example/data", package = "PathoStat")
runPathoStat(input_dir=example_data_dir, batch=batch, condition=condition, report_file="pathostat_report.html", report_dir=".", report_option_binary="111111111", view_report=FALSE, interactive=TRUE)
library(PathoStat)
nbatch <- 11
ncond <- 3
npercond <- 11
#batch <- rep(1:nbatch, each=ncond*npercond/nbatch)
subject_id <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,
10, 10, 10, 12, 12, 12, 13, 13, 13, 15, 15, 15)
batch <- unlist(lapply(subject_id, FUN=function(id) {paste("Person", id)}))
#condition <- rep(1:ncond, each=npercond)
diet <- c(1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 3,
2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 1)
diet_key <- c("simple", "refined", "unrefined")
condition <- diet_key[diet]
example_data_dir <- system.file("example/data", package = "PathoStat")
### apply PathoStat
runPathoStat(input_dir=example_data_dir, batch=batch, condition=condition, report_file="pathostat_report.html", report_dir=".", report_option_binary="111111111", view_report=FALSE, interactive=TRUE)
shiny::runApp('Desktop/shiny/training')
temp
library(ggplot2)
library(genoPlotR)
temp = list.files(pattern="*.DNASEGcsv")
temp
getwd()
setwd("Desktop/multiGenomicContext/example/")
temp = list.files(pattern="*.DNASEGcsv")
temp
temp = list.files(pattern="*.DNASEGcsv")
temp
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
temp = list.files(pattern="*.ANNOTcsv")
dfa<-lapply(temp, read.csv, header = FALSE)
dfa<-lapply(dfa,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
dfa<-lapply(dfa,function(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 40)})
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1)
dfa
df
names(dfa)<-gbknames
dfa
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1)
gbknames
dfa<-lapply(temp, read.csv, header = FALSE)
#dfa<-as.data.frame(rbindlist(dfa))
#colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
dfa<-lapply(dfa,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
dfa<-lapply(dfa,function(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 40)})
dfa
len(temp)
length(temp)
dfa<-read.csv(temp,header = F)
colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
annotation(x1=c(as.matrix(dfa$x1)), x2=NA, text =c(as.matrix(dfa$text)),
col = c(as.matrix(dfa$color)),
rot = 40)
dfa<-annotation(x1=c(as.matrix(dfa$x1)), x2=NA, text =c(as.matrix(dfa$text)),
col = c(as.matrix(dfa$color)),
rot = 40)
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1)
dfa<-read.csv(temp,header = F)
colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
dfa<-annotation(x1=c(as.matrix(dfa$x1)), x2=NA, text =c(as.matrix(dfa$text)),
col = c(as.matrix(dfa$color)),
rot = 40)
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1)
df
dfa
df<-read.csv(temp,header = F)
temp = list.files(pattern="*.DNASEGcsv")
df<-read.csv(temp,header = F)
colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
df<-dna_seg(df)
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1)
df<-list(dna_seg(df))
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1)
plot_gene_map(dna_segs = df, annotations = dfa, annotation_height = 1,seg_plot_height = 10)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_height = 10,
seg_plot_height_unit = 2 )
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_height = 10,
seg_plot_height_unit = 1 )
?plot_gene_map
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_height = 5,
seg_plot_height_unit = 0.5 )
unit(1)
unit(1,"cm")
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_height = 5,
seg_plot_height_unit = unit(1,"cm") )
?unit
?unit()
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_height = 5,
seg_plot_height_unit = unit(1,"inches") )
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_height = 5,
seg_plot_height_unit = unit(1,"points") )
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_height = 1,
seg_plot_height_unit = "lines" )
temp = list.files(pattern="*.DNASEGcsv")
if (length(temp)>1) {
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
}else{
df<-read.csv(temp,header = F)
colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
df<-list(dna_seg(df))
}
temp = list.files(pattern="*.ANNOTcsv")
if (length(temp)>1) {
dfa<-lapply(temp, read.csv, header = FALSE)
dfa<-lapply(dfa,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
dfa<-lapply(dfa,function(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 40)})
}else{
dfa<-read.csv(temp,header = F)
colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
dfa<-annotation(x1=c(as.matrix(dfa$x1)), x2=NA, text =c(as.matrix(dfa$text)),
col = c(as.matrix(dfa$color)),
rot = 40)
}
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_height = 1,
seg_plot_height_unit = "lines" )
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_height = 2,
seg_plot_height_unit = "cm" )
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_height = 20,
seg_plot_height_unit = "cm" )
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_height = 20,
seg_plot_height_unit = "points" )
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_height = 20,
seg_plot_height_unit = "lines" )
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_height = 0,
seg_plot_height_unit = "lines" )
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_yaxis=3,
seg_plot_yaxis_cex=scale_cex)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_yaxis=6,
seg_plot_yaxis_cex=scale_cex)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_yaxis=60,
seg_plot_yaxis_cex=scale_cex)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_yaxis=60,
seg_plot_yaxis_cex=1)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
seg_plot_yaxis=60,
seg_plot_yaxis_cex=10)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 1
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 10
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 0.5
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 0.1
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 1
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 0.5
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 0.8
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 0.9
)
if (length(temp)>1) {
dfa<-lapply(temp, read.csv, header = FALSE)
dfa<-lapply(dfa,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
dfa<-lapply(dfa,function(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 35)})
}else{
dfa<-read.csv(temp,header = F)
colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
dfa<-annotation(x1=c(as.matrix(dfa$x1)), x2=NA, text =c(as.matrix(dfa$text)),
col = c(as.matrix(dfa$color)),
rot = 35)
}
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 0.9
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 0.9,
seg_plot_yaxis=1
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 0.9,
seg_plot_height = 1,
seg_plot_height_unit="lines"
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 0.9,
seg_plot_height = 0,
seg_plot_height_unit="lines"
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 0.9,
seg_plot_height = 100,
seg_plot_height_unit="lines"
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 10,
dna_seg_label_cex = 0.9,
seg_plot_height = 100,
seg_plot_height_unit="lines"
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 10,
dna_seg_label_cex = 0.9
)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 20,
dna_seg_label_cex = 0.9)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 15,
dna_seg_label_cex = 0.9)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 12,
dna_seg_label_cex = 0.9)
temp = list.files(pattern="*.DNASEGcsv")
if (length(temp)>1) {
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
}else{
df<-read.csv(temp,header = F)
colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
df<-list(dna_seg(df))
}
temp = list.files(pattern="*.ANNOTcsv")
function (df, col = "blue", lty = 1, lwd = 1, pch = 8, cex = 1,
if (length(temp)>1) {
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
}else{
df<-read.csv(temp,header = F)
colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
df<-list(dna_seg(df))
}
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
temp = list.files(pattern="*.DNASEGcsv")
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df
temp
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
gbknames
df<-lapply(temp, read.csv, header = FALSE)
df
gbknames
df<-read.csv("gingi.gbk.DNASEGcsv",header = F)
df
temp = list.files(pattern="*.DNASEGcsv")
if (length(temp)>1) {
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){dna_seg(x)})
names(df)<-gbknames
}else{
df<-read.csv(temp,header = F)
colnames(df)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type")
df<-list(dna_seg(df))
}
temp = list.files(pattern="*.ANNOTcsv")
dfa<-lapply(temp, read.csv, header = FALSE)
if (length(temp)>1) {
dfa<-lapply(dfa,function(x){colnames(x)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot");x})
dfa<-lapply(dfa,function(x){annotation(x1=c(as.matrix(x$x1)), x2=NA, text =c(as.matrix(x$text)),
col = c(as.matrix(x$color)),
rot = 35)})
}else{
dfa<-read.csv(temp,header = F)
colnames(dfa)<-c("x1" ,  "x2"  ,  "text" ,"color" ,"rot")
dfa<-annotation(x1=c(as.matrix(dfa$x1)), x2=NA, text =c(as.matrix(dfa$text)),
col = c(as.matrix(dfa$color)),
rot = 35)
}
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 12,
dna_seg_label_cex = 0.9)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 20,
dna_seg_label_cex = 0.9)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 0.9)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 10,
dna_seg_label_cex = 0.9)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 5,
dna_seg_label_cex = 0.9)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 20,
dna_seg_label_cex = 0.9)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 1,
dna_seg_label_cex = 0.9)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 3,
dna_seg_label_cex = 0.9)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 4,
dna_seg_label_cex = 0.9)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 10,
dna_seg_label_cex = 0.9)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 10,
annotation_cex = 0.8,
dna_seg_label_cex = 0.9)
plot_gene_map(dna_segs = df, annotations = dfa,
annotation_height = 8,
annotation_cex = 0.8,
dna_seg_label_cex = 0.9)
df
temp = list.files(pattern="*.DNASEGcsv")
gbknames<- lapply(as.list(temp),function(x){strsplit(x = gsub(pattern = "[.]",replacement = " ",x = x),split = c(" "))[[1]][1]})
df<-lapply(temp, read.csv, header = FALSE)
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df<-lapply(df,function(x){x["name"]<-paste(substr(x["name"],1,30),"...",sep="")})
df
df<-lapply(temp, read.csv, header = FALSE)
df
lapply(df,function(x){x["name"]<-paste(substr(x["name"],1,30),"...",sep="")})
lapply(df,function(x){x["name"]<-substr(x["name"],1,30)})
df<-lapply(df,function(x){colnames(x)<-c("name", "start",  "end" ,"strand"  ,"col" ,"lty" ,"lwd" ,"pch" ,"cex", "gene_type");x})
df
lapply(df,function(x){x["name"]<-substr(x["name"],1,30)})
